실행 컨텍스트
-현재 실행되는 컨텍스트에서 관련없는 실행 코드가 실행되면, 새로운 컨텍스트가 생성되어 스택에 들어가고 제어권이 그 컨텐스트로 이동한다.

1) 활성객체 생성
실행 컨텍스트가 생성되면 실행에 필요한 여러가지 정보를 담을 객체 생성 -> 이를 활성 객체라고한다.

2) arguments 객체 생성

3) Scope 정보 생성
현재 컨텍스트의 유효 범위를 나타내는 스코프 정보를 생성한다.
연결 리스트와 유사한 방시기며, 상위 실행 컨텍스트의 변수도 접근이 가능하다
[[Scope]] -> [List]

4) 변수 생성
활성 객체 (=변수 객체)
현재 실행 컨텍스트 내부에서 사용되는 지역 변수의 생성이 이루어짐.
각각의 프로퍼티가 만들어지고 그 값이 할당됨

**스코프 체인
- 자바스크립트에서는 오로지 함수만이 유효 범위의 한 단위가 된다.
- 이 유효범위를 나타내는 스코프가 [[Scope]] 프로퍼티로 각 함수내에서 연결리스트 형식으로 관리된다. -> 이를 스코프 체인이라고함.
- 각각의 함수는 [[Scope]] 프로퍼티로 잣니이 생성된 실행 컨텍스트의 스코프 체인을 참조한다.
- 이 실행 컨텍스트는 실행된 함수의 [[Scope]] 프로퍼티를 기반으로 새로운 스코프 체인을 만든다.
- 현재 실행되는 함수 객체의 [[Scope]] 프로퍼티를 복사하고, 새롭게 생성된 변수 객체를 해당 체인의 제일 앞에 추가한다.
=> 스코프 체인 = 현재 실행 콘텍스트의 변수 객체 + 상위 컨텍스트의 스코프 체인


function outerFunc() {
    var x = 10;
    var innerFunc = function() {console.log(x);}
    return innerFunc;
}

** outerFunc 실행 컨텍스트가 사라진 이후에 innerFunc()의 스코프체인은 여전히 outerFunc 변수객체를 참조하는가?
=> outerFunc 변수 객체는 여전히 남아있고 innerFunc의 스코프 체인으로 참조됨.
** 이미 생명주기가 끝난 외부함수의 변수를 참조하는 함수를 클로저라고 한다.
클로저로 참조되는 외부변서 (x와 같은 변수)를 자유변수 (free variable) 이라고 한다.

** 대부분 클로저에는 스코프 체인에서 뒤쪽에 있는 객체에 자주 접근하므로, 성능을 저하시키는 이유로 지목되기도한다.
하지만 클로저는 자바스크립트의 가장 강력한 기능중 하나이므로 영리하게 사용필요.


**클로저 활용시 주의사항

1) 프로퍼티 값이 쓰기 가능하므로 그 값이 여러번 호출로 항상 변할 수 있음에 유의해야한다.
2) 하나의 클로저가 여러함수 객체의 스코프 체인에 들어가있는 경우도 있다. (자유 변수호출시 주의해야함.)
3) 루프 안에서 클로저 활용시 유의해야한다. 


SCOPE
특정 장소에 변수를 저장하고 나중에 그 변수를 찾는데에는 잘 정의된 규칙이 필요함. 바로 이런 규칙을 Scope라 한다.

#
AST ( Abstract Syntax Tree) 추상 구문 트리 : 토큰 배열을 프로그램의 문법 구조를 반영하여 중첩 원소를 갖는 트리 형태로 바꾸는 과정.

#
코드 생성(Code-generation) : AST를 컴퓨터에서 실행 코드로 바꾸는 과정. 
JS Engine은 파싱과 코드 생성 과정에서 불필요한 요소를 삭제하는 과정을 거쳐 실행시 성능을 최적화 한다.
자바스크립트는 컴파일레이션을 미리 수행하지 않고, 코드가 실행되기직전에 수행함.


# var a = 2;
엔진 : 컴파일레이션이 시작부터 끝까지 전 가정과 자바스크립트 프로그램 실행을 책임진다.
컴파일러 : 파싱콰 코드생성을 도맡아 한다.
스코프 : 선언된 모든 확인자 검색 목록을 작성하고 유지한다. 또한, 엄격한 규칙을 강제하여 현재 실행코드에서 확인자의 적용 방식을 정한다.

#
가정 1) 변수를 위해 메모리를 할당하고 할당된 메모리를 a라 명명한 후 그 변수에 값 2를 넣는다.

1. 현재 스코프에 미리 변수가 선언되지 않은 경우, 컴파일러가 변수를 선언한다.
2. 엔진이 스코프에서 변수를 찾고 변수가 있다면 값을 대입한다.

#
console.log (a)         //RHS
a = 2;   //LHS
LHS : 대입할 대상 ,  RHS:대입한 값

#
중첩 스코프 : 대상 변수를 현재 스코프에서 발견하지 못하면 엔진은 다음 바깥의 스코프로 넘어가거나 글로벌 스코프에 도달할때까지 계속 찾는다.
- 엔진은 현재 스코프에서 변수를 찾기 시작하고, 찾지 못하면 한 단계씩 올라간다.
- 최상위 글로벌 스코프에 도달하면 변수를 찾았든, 못 찾았든 검색을 멈춘다.

#렉시컬 스코프 : 프로그래머가 코들르 작성할때 함수를 어디에 선언하는지에 따라 정의되는 스코프.
